

from typing import Optional, List, Tuple, Dict
from enum import Enum
from datetime import datetime

from pydantic import BaseModel
from scipy.integrate._ivp.ivp import OdeResult
from numpy import pi, linspace


class SimSystem(str, Enum):
    """List of the available systems to simulate
    
    Caution: this list needs to coincide with SimulationSubclass.system
    attributes of Simulations defined in simulations.py. Otherwise the code
    will break. (qho is an exception to test the api).
    """
    ho = "Harmonic-Oscillator"
    qho = "Quantum-Harmonic-Oscillator" #Just an example. Not simulating it.


class IntegrationMethods(str, Enum):
    """List of available integration methods"""
    RK45 = "RK45"
    RK23 = "RK23"


class HOParams(BaseModel):
    """List of parameters of the Harmonic Oscillator system"""
    m: float    # Mass
    k: float    # Force constant


class SimRequest(BaseModel):
    """Schema needed to request harmonic oscillator simulations
    
    Most of the attributes in this pydantic class are arguments of the
    `HarmonicOsc1D.__init__` method. See `HarmonicOsc1D` documentation
    in simulation.py to understand them. 
    """
    system: SimSystem
    t_span: Optional[List[float]] = [0, 2 * pi]
    t_eval: Optional[List[float]]
    ini_cndtn: Optional[List[float]] = [1, 0]
    params: Optional[HOParams] = HOParams(m=1, k=1)
    method: Optional[IntegrationMethods] = 'RK45'
    # The backend will assign a sim_id, so it is not necessary to provide one.
    sim_id: Optional[str] = None
    # If we implement logging, user_id will be handled by backend
    user_id: Optional[int] = None


class SimIdResponse(BaseModel):
    """Schema for the response of a simulation request via POST to route
    "/api/simulate/{sim_sys}"
    """
    sim_id : str
    sim_system : SimSystem
    sim_status_path : str
    sim_pickle_path : str
    message : Optional[str]


class SimResults(BaseModel):
    """Results of simulation as returned by scipy.integrate.solve_ivp"""
    sim_results: OdeResult


class SimStatus(BaseModel):
    """Schema of the status of simulations

    This pydantic model is intended to store paths of results of the simulations
    algong with some metadata. This is what the API returns when someone
    requests a simulation via /api/simulate/{system}/ with method=post.
    
    Atributes
    ---------
    sim_id : int
        ID number of simulation.
    user_id : int
        User id number stored in database.
    date : datetime
        Late of request of simulation
    system : SimSystem
        Simulated system
    route_pickle : str
        Route of pickle file generated by the simulation backend.
    route_results : str
        Route of frontend showing results.
    route_plot : list
        Route of plots generated by the simulation backend.
    plot_query_values : list of strings
        Query params values of different automatically generated plots.
        These values are needed to download the plots. 
    status : bool
        Status of simulation.
    message : str
        Additional information on status of simulation.
    """
    # User-related attributes
    sim_id: str
    user_id : int
    date: datetime

    # Simulation-related attributes
    system: SimSystem
    ini_cndtn: Optional[List[float]]
    params: Optional[Dict[str, float]]
    method: Optional[IntegrationMethods]

    # Response-related attributes
    route_pickle: Optional[str]
    route_results: Optional[str]
    route_plots: Optional[str]
    plot_query_values: Optional[List[str]]
    status : bool
    message : Optional[str]
